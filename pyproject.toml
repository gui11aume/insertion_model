[settings]
convention = "google"

[tool.poetry]
name = "insertion-model"
version = "0.1.0"
description = "Insertion model for HIV and everything else"
authors = ["Yunqi Song <emmasongyunqi@gmail.com>", "Guillaume Filion <guillaume.filion@gmail.com>"]
readme = "README.md"
packages = [{include = "insertion_model", from = "src"}]

[tool.poetry.dependencies]
python = ">=3.10"
torch = "^2.5.0"  # PyTorch for deep learning
pyro-ppl = "^1.9.1"  # Pyro for probabilistic programming
safetensors = "^0.4.1"  # Efficient and safe tensor serialization
tqdm = "^4.66.5"  # Progress bar library
matplotlib = "^3.9.2"  # Plotting library
pytest = "^8.3.3"  # Testing framework
pytest-cov = "^5.0.0"  # Coverage plugin for pytest
pytest-benchmark = "^4.0.0"  # Benchmark plugin for pytest


[tool.poetry.group.dev.dependencies]
virtualenv = "^20.26.6"  # Virtual environment creation for pre-commit hooks
ruff = "^0.8.0"  # Fast Python linter and formatter
types-protobuf = "^5.28.0"  # Type annotations for Protocol Buffers
pre-commit = "^4.0.1"  # Pre-commit hooks for code discipline
pydocstyle = "^6.3.0"  # Pydocstyle for docstring checks
mypy = "^1.11.2"  # Static type checker for Python

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py310"  # Target Python version for linting
line-length = 100  # Maximum line length

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`) codes by default.
select = [
    # Code style and formatting
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes

    # Quality and best practices
    "A",  # flake8-builtins
    "B",  # flake8-bugbear
    "C",  # flake8-comprehensions
    "N",  # pep8-naming
    "SIM",  # flake8-simplify
    "UP",  # pyupgrade

    # Imports
    "I",  # isort

    # Docstrings
    "D",  # pydocstyle

    # Complexity
    "C90",  # mccabe

    # Quotes
    "Q",  # flake8-quotes

    # Type checking
    "TCH",  # flake8-type-checking

    # Testing
    "PT",  # flake8-pytest-style

    # Function and method behavior
    "ARG",  # flake8-unused-arguments
    "RET",  # flake8-return

    # Miscellaneous
    "COM",  # flake8-commas
    "ERA",  # eradicate
    "PL",  # pylint
]
ignore = ["COM812", "PLR0913"]  # Ignore specific error codes

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "I", "W", "Q", "COM"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["D104", "F401"]  # Ignore unused imports and docstrings in __init__.py files

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"
docstring-quotes = "double"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.ruff.lint.isort]
case-sensitive = false
combine-as-imports = true
force-single-line = false
force-sort-within-sections = false
forced-separate = []
from-first = false
lines-after-imports = 2
lines-between-types = 0
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
split-on-trailing-comma = true

[tool.pytest.ini_options]
pythonpath = [
  "src"
]
testpaths = [
    "tests",
    "integration",
]
markers = [
    "benchmark: marks tests as benchmark (deselect with '-m \"not benchmark\"')",
    "config: marks tests for configurations (deselect with '-m \"not config\"')",
    "dummy: marks dummy tests (deselect with '-m \"not dummy\"')",
    "gpu: marks tests using a GPU (deselect with '-m \"not gpu\"')",
    "diskspace: marks tests as requiring disk space (deselect with '-m \"not diskspace\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

[tool.coverage.run]
omit = [
    "*/__init__.py",
    "*/tests/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
]
